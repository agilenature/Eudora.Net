<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:wv2="clr-namespace:Microsoft.Web.WebView2.Wpf;assembly=Microsoft.Web.WebView2.Wpf">

    <ControlTemplate x:Key="validationErrorTemplate">
        <DockPanel>
            <StackPanel Orientation="Horizontal" DockPanel.Dock="Top">
                <Grid Width="12" Height="12">
                    <Ellipse Width="12" Height="12" HorizontalAlignment="Center" VerticalAlignment="Center" Fill="Red"/>
                    <TextBlock Foreground="White" 
                               FontWeight="Heavy" 
                               FontSize="8"
                               HorizontalAlignment="Center" VerticalAlignment="Center" TextAlignment="Center"
                               ToolTip="{Binding ElementName=ErrorAdorner,Path=AdornedElement.(Validation.Errors)[0].ErrorContent}">X</TextBlock>
                </Grid>
                <TextBlock Foreground="Red" 
                           FontWeight="Medium" 
                           Margin="2,0,0,0"
                           Text="{Binding ElementName=ErrorAdorner, Path=AdornedElement.(Validation.Errors)[0].ErrorContent}"/>
            </StackPanel>
            <AdornedElementPlaceholder x:Name="ErrorAdorner"/>
        </DockPanel>
    </ControlTemplate>

    <Style x:Key="SmallPanelButton" TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="Width" Value="20"/>
        <Setter Property="Height" Value="20"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.3"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="TitlebarCloseButton" TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="Background" Value="DarkRed"/>
        <Setter Property="BorderBrush" Value="Crimson"/>
        <Setter Property="Opacity" Value=".5"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="Width" Value="20"/>
        <Setter Property="Height" Value="20"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="border" 
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}" 
                            BorderThickness="{TemplateBinding BorderThickness}" 
                            SnapsToDevicePixels="true">
                        <ContentPresenter x:Name="contentPresenter" Focusable="False"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          Margin="{TemplateBinding Padding}"
                                          RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" TargetName="border" Value="Crimson"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="DarkRed"/>
                            <Setter Property="Opacity" Value="1"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" TargetName="border" Value="DarkRed"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="DarkRed"/>
                            <Setter Property="Opacity" Value="1"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="DialogMainButton" TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="Width" Value="75"/>
        <Setter Property="Height" Value="24"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
    </Style>

    <Style x:Key="HeaderPanel">
        <Setter Property="Control.Background" Value="{DynamicResource BorderLightBrushKey}"/>
        <Setter Property="Control.BorderBrush" Value="{DynamicResource BorderLightBrushKey}"/>
    </Style>


    <!--Overrides of the WpfThemer templates.
    
    In part, this is to support the Eudora Classic color scheme. Specifically, in Eudora 7.1 
    the content area of a control tends to be white. WpfThemer tends to make the default 
    Background and Control colors the same, which is a more modern styling approach. To 
    support both, in the Eudora Classic theme the BackgroundNormal color is set to white.
    
    The other reason is to achieve certain effects compatible with the overall look and
    feel of Eudora, which differs a bit from the default WpfThemer styling.
-->

    <Style x:Key="{x:Type wv2:WebView2}" TargetType="{x:Type wv2:WebView2}">
        <Setter Property="DefaultBackgroundColor" Value="#EEEEEE"/>
        <Setter Property="DesignModeForegroundColor" Value="#151515"/>
        <Setter Property="OverridesDefaultStyle" Value="True"/>
    </Style>

    <!--<Style x:Key="{x:Type ContextMenu}" TargetType="{x:Type ContextMenu}" BasedOn="{StaticResource {x:Type ContextMenu}}">
        <Setter Property="Background" Value="{DynamicResource BackgroundNormalBrushKey}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource BorderNormalBrushKey}"/>
        <Setter Property="Foreground" Value="{DynamicResource ForegroundNormalBrushKey}"/>
    </Style>-->
    
    <Style x:Key="{x:Type ToolBarTray}" TargetType="{x:Type ToolBarTray}" BasedOn="{StaticResource {x:Type ToolBarTray}}">
        <Setter Property="Background" Value="{DynamicResource ControlNormalBrushKey}"/>
        <Setter Property="Control.BorderBrush" Value="{DynamicResource ControlNormalBrushKey}"/>
    </Style>

    <Style x:Key="{x:Type ToolBar}" TargetType="ToolBar" BasedOn="{StaticResource {x:Type ToolBar}}">
        <Setter Property="Background" Value="{DynamicResource ControlNormalBrushKey}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource ControlNormalBrushKey}"/>
        <Setter Property="Foreground" Value="{DynamicResource ForegroundNormalBrushKey}"/>
        <Setter Property="BorderThickness" Value="0"/>
    </Style>

    <Style x:Key="{x:Static ToolBar.ComboBoxStyleKey}" TargetType="{x:Type ComboBox}" BasedOn="{StaticResource {x:Type ComboBox}}">
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Background" Value="{DynamicResource BackgroundNormalBrushKey}"/>
        <Setter Property="Foreground" Value="{DynamicResource ForegroundNormalBrushKey}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource BorderNormalBrushKey}"/>
    </Style>
    
    <Style x:Key="{x:Type ListBox}" TargetType="ListBox" BasedOn="{StaticResource {x:Type ListBox}}">
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Background" Value="{DynamicResource BackgroundNormalBrushKey}"/>
    </Style>

    <Style x:Key="{x:Type ListView}" TargetType="ListView" BasedOn="{StaticResource {x:Type ListView}}">
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Background" Value="{DynamicResource BackgroundNormalBrushKey}"/>
    </Style>

    <Style x:Key="{x:Type TextBox}" TargetType="TextBox" BasedOn="{StaticResource {x:Type TextBox}}">
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Background" Value="{DynamicResource BackgroundNormalBrushKey}"/>
    </Style>

    <Style x:Key="{x:Type ComboBox}" TargetType="ComboBox" BasedOn="{StaticResource {x:Type ComboBox}}">
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Background" Value="{DynamicResource BackgroundNormalBrushKey}"/>
    </Style>

    <Style x:Key="{x:Type TreeView}" TargetType="{x:Type TreeView}" BasedOn="{StaticResource {x:Type TreeView}}">
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Background" Value="{DynamicResource BackgroundNormalBrushKey}"/>
    </Style>

    <Style x:Key="{x:Type DataGrid}" TargetType="{x:Type DataGrid}" BasedOn="{StaticResource {x:Type DataGrid}}">
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Background" Value="{DynamicResource BackgroundNormalBrushKey}"/>
    </Style>

</ResourceDictionary>